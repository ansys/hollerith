# check spelling, codestyle
name: GitHub CI

# run only on main branch.  This avoids duplicated actions on PRs
on:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  style:
    name: Code style
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Run pre-commit
        run: pre-commit run --all-files || ( git status --short ; git diff ; exit 1 )

  build:
    name: Build package on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        cibw_archs: ["auto"]
        cfg:
          - {python-version: '3.8', cibw-build: 'cp38-*'}
          - {python-version: '3.9', cibw-build: 'cp39-*'}
          - {python-version: '3.10', cibw-build: 'cp310-*'}
          - {python-version: '3.11', cibw-build: 'cp311-*'}
          - {python-version: '3.12', cibw-build: 'cp312-*'}
    steps:
      - name: Create wheel for CPython ${{ matrix.cfg.python-version }}
        uses: ansys/actions/build-ci-wheels@v4
        with:
          python-version: ${{ matrix.cfg.python-version }}
          cibw-build: ${{ matrix.cfg.cibw-build }}
          cibw-skip: "*-musllinux* *-manylinux_i686* *-manylinux1*"
          cibw-archs: ${{ matrix.cibw_archs }}

  macos-build:
    name: Build package on macos-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        cibw_archs: ["auto"]
        cfg:
          - {python-version: "3.9", cibw-build: 'cp39-*'}
          - {python-version: "3.10", cibw-build: 'cp310-*'}
          - {python-version: '3.11', cibw-build: 'cp311-*'}
          - {python-version: '3.12', cibw-build: 'cp312-*'}
    steps:
      - name: "Install Git and clone project"
        uses: actions/checkout@v4

      - name: "Set up QEMU"
        if: ${{ matrix.cibw-archs == 'aarch64' }}
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64
      - name: "Build wheels for CPython ${{matrix.python-version }}"
        uses: pypa/cibuildwheel@v2.19.2
        env:
          CIBW_BUILD: ${{ matrix.cfg.cibw-build }}
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_MANYLINUX_I686_IMAGE: manylinux2014
          CIBW_ARCHS: ${{ matrix.cibw-archs }}
      - name: "Upload wheel"
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: ./wheelhouse/*.whl
          retention-days: 7
  tests:
    name: Testing
    needs: [build, style]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Linux pip cache
        uses: actions/cache@v3
        if: ${{ runner.os == 'Linux' }}
        with:
          path: ~/.cache/pip
          key: Python-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements_*.txt') }}
          restore-keys: |
            Python-${{ runner.os }}-${{ matrix.python-version }}
      - name: Window pip cache
        uses: actions/cache@v3
        if: ${{ runner.os == 'Windows' }}
        with:
          path: ~\AppData\Local\pip\Cache
          key: Python-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements_*.txt') }}
          restore-keys: |
            Python-${{ runner.os }}-${{ matrix.python-version }}

      # Docker layer caching.
      - uses: satackey/action-docker-layer-caching@v0.0.11
        if: runner.os == 'Linux'
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true

      - name: Create Linux wheel
        run: |
          pip install build
          python -m build --wheel

      - name: Validate wheel
        run: |
          pip install twine
          twine check dist/*

      - name: Install library on Linux
        if: ${{ runner.os == 'Linux' }}
        run: pip install $(echo dist/*)

      - name: Install library on Windows
        if: ${{ runner.os == 'Windows' }}
        run: pip install (get-item .\dist\*.whl)

      - name: Unit testing
        run: |
          pip install -r requirements/requirements_test.txt
          cd tests  # so we're testing the install, not local
          pytest -svx

      - name: Build sdist
        run: |
          pip install build
          python -m build -s

      - name: Check metadata
        run: |
          pip install twine
          twine check dist/*

      - name: Upload wheel
        uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz
          retention-days: 7

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install library
        run: pip install .

      - name: Build HTML
        run: |
          pip install -r requirements/requirements_docs.txt
          make -C doc html SPHINXOPTS="-W"

      - name: Build PDF Documentation
        run: |
          sudo apt update
          sudo apt-get install -qy texlive-latex-extra latexmk
          make -C doc pdf

      - name: Upload HTML Documentation
        uses: actions/upload-artifact@v3
        with:
          name: Documentation-html
          path: doc/build/html
          retention-days: 7

      - name: Upload PDF Documentation
        uses: actions/upload-artifact@v3
        with:
          name: Documentation-pdf
          path: doc/build/latex/hollerith*.pdf
          retention-days: 7

  Release:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [style, build, macos-build, docs, tests]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3

      - name: List directory structure
        run: ls -R

      # note how we use the PyPI tokens
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.HOLLERITH_PYPI_TOKEN }}
        run: |
          python -m pip install --upgrade pip twine
          python -m twine upload --skip-existing ./**/*.whl
          python -m twine upload --skip-existing ./**/*.tar.gz

      - name: Zip HTML Documentation
        uses: vimtor/action-zip@v1
        with:
          files: Documentation-html
          dest: hollerith-Documentation-HTML.zip

      - name: Deploy documentation to gh pages
        uses: JamesIves/github-pages-deploy-action@v4.4.1
        with:
          BRANCH: gh-pages
          FOLDER: Documentation-html
          CLEAN: true
          SINGLE_COMMIT: true

      - name: Release to GitHub
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./**/*.whl
            ./**/*.zip
            ./**/hollerith*.pdf
            ./**/*.tar.gz
