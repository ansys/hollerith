# check spelling, codestyle
name: GitHub CI

# run only on main branch.  This avoids duplicated actions on PRs
on:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Define the environment
env:
  MAIN_PYTHON_VERSION: 3.11
  LIBRARY_NAME: hollerith

jobs:
  code-style:
    name: "Code style"
    runs-on: ubuntu-latest
    steps:
      - name: "Run code style checks"
        uses: ansys/actions/code-style@v6
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          use-python-cache: false

  build:
    name: Build package on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        cibw_archs: ["auto"]
        cfg:
          - {python-version: '3.10', cibw-build: 'cp310-*'}
          - {python-version: '3.11', cibw-build: 'cp311-*'}
          - {python-version: '3.12', cibw-build: 'cp312-*'}
        should-release:
          - ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags') }}
        exclude:
          - should-release: false
            os: macos-latest
    steps:
      - name: Create wheel for CPython ${{ matrix.cfg.python-version }}
        uses: ansys/actions/build-ci-wheels@v6
        with:
          python-version: ${{ matrix.cfg.python-version }}
          cibw-build: ${{ matrix.cfg.cibw-build }}
          cibw-archs: ${{ matrix.cibw_archs }}
          operating-system: ${{ matrix.os }}
          library-name: ${{ env.LIBRARY_NAME }}

  tests:
    name: Testing
    needs: [build, code-style]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
        os: [ubuntu-latest, windows-latest]
        numpy-version: ['1.26.4', 'latest']
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Linux pip cache
        uses: actions/cache@v3
        if: ${{ runner.os == 'Linux' }}
        with:
          path: ~/.cache/pip
          key: Python-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements_*.txt') }}-numpy-${{ matrix.numpy-version }}
          restore-keys: |
            Python-${{ runner.os }}-${{ matrix.python-version }}

      - name: Window pip cache
        uses: actions/cache@v3
        if: ${{ runner.os == 'Windows' }}
        with:
          path: ~\AppData\Local\pip\Cache
          key: Python-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements_*.txt') }}-numpy-${{ matrix.numpy-version }}
          restore-keys: |
            Python-${{ runner.os }}-${{ matrix.python-version }}

      # Docker layer caching.
      - uses: satackey/action-docker-layer-caching@v0.0.11
        if: runner.os == 'Linux'
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true

      - name: Create Linux wheel
        run: |
          pip install build
          python -m build --wheel

      - name: Validate wheel
        run: |
          pip install twine
          twine check dist/*

      - name: Install library on Linux
        if: ${{ runner.os == 'Linux' }}
        run: pip install $(echo dist/*)

      - name: Install library on Windows
        if: ${{ runner.os == 'Windows' }}
        run: pip install (get-item .\dist\*.whl)

      - name: Install Numpy old version
        if: ${{ matrix.numpy-version != 'latest' }}
        run: pip install numpy==${{ matrix.numpy-version }}

      - name: Install Numpy latest version
        if: ${{ matrix.numpy-version == 'latest' }}
        run: pip install numpy --upgrade --force-reinstall

      - name: Unit testing
        run: |
          pip install -r requirements/requirements_test.txt
          cd tests  # so we're testing the install, not local
          pytest -svx

      - name: Build sdist
        run: |
          pip install build
          python -m build -s

      - name: Check metadata
        run: |
          pip install twine
          twine check dist/*

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        if: ${{ runner.os == 'Linux' && env.MAIN_PYTHON_VERSION == matrix.python-version && matrix.numpy-version == 'latest' }}
        with:
          name: ${{ env.LIBRARY_NAME }}-sdist
          path: dist/*.tar.gz
          retention-days: 7

  compile-wheels:
    name: "Join all wheels into a single artifact"
    needs: [tests]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Find all wheels and source distributions
        run: |
          find . -name "*.whl" -exec cp {} dist/ \;
          find . -name "*.tar.gz" -exec cp {} dist/ \;

      - name: List contents of dist
        run: ls dist

      - name: Upload all wheels
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.LIBRARY_NAME }}-artifacts
          path: dist/*
          retention-days: 7

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Run Ansys documentation building action
        uses: ansys/actions/doc-build@v6
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  release:
    name: "Release project to private PyPI, public PyPI and GitHub"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [docs, tests, build]
    runs-on: ubuntu-latest
    steps:

      - name: "Release to the public PyPI repository"
        uses: ansys/actions/release-pypi-public@v6
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYPI_TOKEN }}

      - name: "Release to GitHub"
        uses: ansys/actions/release-github@v6
        with:
          library-name: ${{ env.LIBRARY_NAME }}
